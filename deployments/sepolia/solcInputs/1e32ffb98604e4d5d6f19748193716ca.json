{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\n// 1、创建一个收款函数\n// 2、记录投资人并且查看\n// 3、在锁定期内，达到目标值，生产商可以提款\n// 4、在锁定期内，没有达到目标值，投资人在锁定期以后退款\n\ncontract FundMe{\n    mapping (address => uint256) public fundersToAmount;\n    \n    AggregatorV3Interface public dataFeed;\n\n    uint256 public constant MINIMUM_VALUE = 100 * 10 ** 18;   // USD\n\n    uint256 public constant TARGET = 1000 * 10 ** 18;\n\n    address public owner;\n\n    uint256 deploymentTimestamp;    // 众筹开始的时间\n    uint256 lockTime;               // 锁定时长\n\n    address erc20Addr;             \n    bool public getFundSuccess = false;\n\n    constructor(uint256 _lockTime, address dataFeedAddr){\n        // sepolia testnet\n        dataFeed = AggregatorV3Interface(dataFeedAddr);\n        owner = msg.sender;\n        deploymentTimestamp = block.timestamp;  // 发送合约所在区块的时间点\n        lockTime = _lockTime;\n    }\n\n    function fund() external payable {\n        require(convertEthToUsd(msg.value) >= MINIMUM_VALUE, \"Send more ETH\");\n        require(block.timestamp < deploymentTimestamp + lockTime, \"window is closed\");\n        fundersToAmount[msg.sender] += msg.value;\n    }\n\n    /**\n     * Returns the latest answer.\n     */\n    function getChainlinkDataFeedLatestAnswer() public view returns (int) {\n        // (uint80 roundID, int answer, uint startedAt, uint timeStamp, uint80 answeredInRound) = dataFeed.latestRoundData();\n        (,int answer,,,) = dataFeed.latestRoundData();\n        return answer;\n    }\n\n    function convertEthToUsd(uint256 ethAmount) internal view returns(uint256){\n        // ETH amount * ETH price = ETH value\n        uint256 ethPrice = uint256(getChainlinkDataFeedLatestAnswer());\n        return ethAmount * ethPrice / (10 ** 8);\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        owner = newOwner;\n    }\n\n    function getFund() external windowClosed onlyOwner {\n        require(convertEthToUsd(address(this).balance) >= TARGET, \"Target is not reached.\");\n        // solidity 的三种不同转账方式\n        // transfer（纯转账）：transfer ETH and revert if tx failed.\n        // payable(msg.sender).transfer(address(this).balance);\n        \n        // send（纯转账）：transfer ETH and return false if failed.\n        // bool success = payable(msg.sender).send(address(this).balance);\n        // require(success, \"tx failed.\");\n        \n        // call（转账中可调用函数或记录数据）：transfer ETH with data return value of function and bool\n        bool success;\n        (success, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(success, \"transfer tx failed.\");\n        getFundSuccess = true;  // flag\n    }\n\n    function refund() external windowClosed {\n        require(convertEthToUsd(address(this).balance) < TARGET, \"Target is reached.\");\n        require(fundersToAmount[msg.sender] != 0, \"there is no fund for you\");\n        bool success;\n        (success, ) = payable(msg.sender).call{value: fundersToAmount[msg.sender]}(\"\");\n        require(success, \"transfer tx failed.\");\n        fundersToAmount[msg.sender] = 0;\n    }\n\n    function setFunderToAmount(address funder, uint256 amountToUpdate) external {\n        require(msg.sender == erc20Addr, \"You do not have permission to call this function\");\n        fundersToAmount[funder] = amountToUpdate;\n    }\n\n    function setErc20Addr(address _erc20Addr) public onlyOwner {\n        erc20Addr = _erc20Addr;\n    }\n\n    // 修改器\n    modifier windowClosed() {\n        require(block.timestamp >= deploymentTimestamp + lockTime, \"window is not closed\");\n        _;  // 应用此修改器的函数的其他操作，根据位置来决定先执行 修改器的逻辑 还是 函数的逻辑\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"this function can only be called by owner\");\n        _;\n    }\n}"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}